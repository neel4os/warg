// Package pkg provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package pkg

import (
	"github.com/labstack/echo/v4"
)

// Defines values for HealthStatus.
const (
	Degraded HealthStatus = "Degraded"
	Up       HealthStatus = "Up"
)

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	// DetailedMessage A detailed error message
	DetailedMessage *string `json:"detailed_message,omitempty"`

	// ErrorCode The error code
	ErrorCode string `json:"error_code"`

	// Message The error message
	Message string `json:"message"`
}

// Health defines model for Health.
type Health struct {
	// Status The status of the API
	Status HealthStatus `json:"status"`
}

// HealthStatus The status of the API
type HealthStatus string

// OnboardingRequest defines model for OnboardingRequest.
type OnboardingRequest struct {
	// AccountName The name of the account to be onboarded
	AccountName string `json:"account_name"`

	// Email The email address of the user
	Email string `json:"email"`

	// FirstName The first name of the user
	FirstName string `json:"first_name"`

	// LastName The last name of the user
	LastName string `json:"last_name"`
}

// OnboardingResponse defines model for OnboardingResponse.
type OnboardingResponse struct {
	// OnboardingId The status of the onboarding request
	OnboardingId string `json:"onboarding_id"`
}

// OnboardAccountJSONRequestBody defines body for OnboardAccount for application/json ContentType.
type OnboardAccountJSONRequestBody = OnboardingRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /health)
	CheckHealth(ctx echo.Context) error
	// Onboard an account
	// (POST /onboard)
	OnboardAccount(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CheckHealth converts echo context to params.
func (w *ServerInterfaceWrapper) CheckHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CheckHealth(ctx)
	return err
}

// OnboardAccount converts echo context to params.
func (w *ServerInterfaceWrapper) OnboardAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OnboardAccount(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.CheckHealth)
	router.POST(baseURL+"/onboard", wrapper.OnboardAccount)

}
